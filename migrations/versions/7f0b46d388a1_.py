"""
1.4.1 - Move consent_type from partcipant to biospecimen

Revision ID: 7f0b46d388a1
Revises: c89fea71ca43
Create Date: 2018-09-20 14:14:31.766224

"""
from alembic import op
import sqlalchemy as sa
import dataservice
from dataservice.api.common.model import KfId

# revision identifiers, used by Alembic.
revision = '7f0b46d388a1'
down_revision = 'c89fea71ca43'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('biospecimen', sa.Column(
        'consent_type', sa.Text(), nullable=True))
    data_upgrades()
    op.drop_column('participant', 'consent_type')
    # ### end Alembic commands ###


def data_upgrades():
    """
    COPY participant.consent_type TO biospecimen.consent_type
    """
    connection = op.get_bind()
    participant = sa.Table(
        'participant',
        sa.MetaData(),
        sa.Column('consent_type', sa.Text(), nullable=True),
        sa.Column('kf_id', KfId(length=11)))
    biospecimen = sa.Table(
        'biospecimen',
        sa.MetaData(),
        sa.Column('consent_type', sa.Text(), nullable=True),
        sa.Column('participant_id', KfId(length=11)))
    results = connection.execute(sa.select([
        participant.c.consent_type, participant.c.kf_id
    ])).fetchall()
    for cons, p_id in results:
        connection.execute(biospecimen.update().where(
            biospecimen.c.participant_id == p_id).values(
            consent_type=cons))


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('participant', sa.Column('consent_type',
                                           sa.TEXT(), autoincrement=False, nullable=True))
    data_downgrades()
    op.drop_column('biospecimen', 'consent_type')
    # ### end Alembic commands ###


def data_downgrades():
    """
    COPY biospecimen.consent_type TO participant.consent_type
    """
    connection = op.get_bind()
    participant = sa.Table(
        'participant',
        sa.MetaData(),
        sa.Column('consent_type', sa.Text(), nullable=True),
        sa.Column('kf_id', KfId(length=11)))
    biospecimen = sa.Table(
        'biospecimen',
        sa.MetaData(),
        sa.Column('consent_type', sa.Text(), nullable=True),
        sa.Column('participant_id', KfId(length=11)))
    results = connection.execute(sa.select([
        biospecimen.c.consent_type, biospecimen.c.participant_id
    ])).fetchall()

    for cons, p_id in results:
        connection.execute(participant.update().where(
            participant.c.kf_id == p_id).values(
            consent_type=cons
        ))
