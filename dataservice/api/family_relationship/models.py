from dataservice.extensions import db
from dataservice.api.common.model import Base
from dataservice.api.participant.models import Participant


class FamilyRelationship(db.Model, Base):
    """
    Represents a relationship between two family members.

    The relationship table represents an undirected graph. Only one
    relationship will exist between any two participants.
    (P1 -> P2 is equal to P2 -> P1 and only one of these will be stored)

    :param _id: Unique id assigned by RDBMS
    :param kf_id: Unique id given by the Kid's First DCC
    :param created_at: Time of object creation
    :param modified_at: Last time of object modification
    :param participant_id: Kids first id of the first Participant in the
    relationship
    :param relative_id: Kids first id of the second Participant (or relative)
    in the relationship
    :param relationship_type: Text describing the nature of the
    relationship (i.e. father, mother, sister, brother)
    :param _rel_name: an autogenerated parameter used to ensure that the
    relationships are not duplicated and the graph is undirected
    """
    __tablename__ = 'family_relationship'

    _rel_name = db.Column(db.Text, unique=True)

    participant_id = db.Column(
        db.String(8),
        db.ForeignKey('participant.kf_id'), nullable=False)

    relative_id = db.Column(
        db.String(8),
        db.ForeignKey('participant.kf_id'), nullable=False)

    relationship_type = db.Column(db.Text, nullable=False)

    participant = db.relationship(
        Participant,
        primaryjoin=participant_id == Participant.kf_id,
        backref=db.backref('outgoing_family_relationships',
                           cascade='all, delete-orphan'))

    relative = db.relationship(
        Participant,
        primaryjoin=relative_id == Participant.kf_id,
        backref=db.backref('incoming_family_relationships',
                           cascade='all, delete-orphan'))

    def _create_relationship_name(self, **kwargs):
        """
        Populates the _rel_name column using participant_id and relative_id

        Get participant_id and relative_id directly from kwargs or from the
        kf_id's of participant and relative objects passed in via kwargs

        Sort the ids and concatenate with a space to delimit
        """
        # Build from foreign keys in kwargs
        participant_id = kwargs.get('participant_id')
        relative_id = kwargs.get('relative_id')
        if (participant_id is None) or (relative_id is None):
            participant = kwargs.get('participant')
            relative = kwargs.get('relative')
            # Build from relationship objects in kwargs
            if participant and relative:
                participant_id = participant.kf_id
                relative_id = relative.kf_id
        # Create sorted list and concatenate using space
        if participant_id and relative_id:
            self._rel_name = ' '.join(sorted([participant_id, relative_id]))

    def __init__(self, **kwargs):
        self._create_relationship_name(**kwargs)
        super(FamilyRelationship, self).__init__(**kwargs)

    def __repr__(self):
        return '{} is {} of {}'.format(self.participant,
                                       self.relationship_type,
                                       self.relative)
